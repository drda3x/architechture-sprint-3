@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/java.puml
!include FONTAWESOME/users.puml

System_Boundary(device_manager, "Управление устройствами") {

	class MessageConsumer {
		+Command receive_message();
	}

	class Command {
		integer device_id
		+void execute()
	}

	class DeviceManager {
		-Device[] devices
		+void process_message(String message)
		-bool add_device(Device new_device)
		-bool remove_device(int device_id)
	}

	abstract class Device {
		-integer device_id
		+void update_state(String new_state)
	}

	class LightDevice {
		-bool status
		+void update_state(String new_state)
		-void turn_on()
		-void turn_off()
	}

	class HitDevice {
		-float target_temp
		-float current_temp
		+void update_state(String new_state)
		-void set_temperature()
	}

	class GateDevice {
		-bool status
		+void update_state(String new_state)
		-void open()
		-void close()
	}
	Device *-- DeviceManager

	Device <|-- LightDevice
	Device <|-- HitDevice
	Device <|-- GateDevice

	MessageConsumer --> Command : creates
	DeviceManager -- Command : uses
}

System_Boundary(telemetry_manager, "Телеметрия") {

	class TelemetryData {
		+integer device_id
		+string data
	}

	class PostgreSQLModel {
		+void save()
	}

	abstract class Device {
		-integer device_id
		+void update_state(String new_state)
	}

	class LightDevice {
		-bool status
		+void update_state(String new_state)
		-void turn_on()
		-void turn_off()
	}

	class HitDevice {
		-float target_temp
		-float current_temp
		+void update_state(String new_state)
		-void set_temperature()
	}

	class GateDevice {
		-bool status
		+void update_state(String new_state)
		-void open()
		-void close()
	}

	Device <|-- LightDevice
	Device <|-- HitDevice
	Device <|-- GateDevice

	class TelemetryManager {
		-Device[] devices

		+TelemetryData send_request()
		+void update_db(TelemetryData)
	}

	Device *-- TelemetryManager

	TelemetryData <-- PostgreSQLModel : uses
	TelemetryManager --> TelemetryData : uses
	TelemetryManager --> PostgreSQLModel : calls
}


@enduml
